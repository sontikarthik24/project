/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package controller.Bank;

import controller.Police.PoliceViewTasksJPanel;
import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Database;
import model.Bank;
import model.PharmaTransactions;

/**
 *
 * @author hp
 */
public class BankAdminJPanel extends javax.swing.JPanel {
    JPanel layoutContainer;
    /**
     * Creates new form BankAdminJPanel
     */
    public BankAdminJPanel(JPanel layoutContainer) {
        initComponents();
        this.layoutContainer = layoutContainer;
        
        addApplicationData();
        addPharmacyData();
    }

    private ArrayList<Bank> bankList() {
        ArrayList<Bank> BankList = new ArrayList<>();
        
        Database db = new Database();
        
        try {
            Connection conn = db.connect();
            String sql = "select * from bankdata";
            PreparedStatement statement = conn.prepareStatement(sql);
            ResultSet a = statement.executeQuery();
            Bank p;
            while(a.next()) {
                BankList.add(new Bank(a.getString("name"),a.getString("dob"), a.getString("gender"), a.getString("address"), a.getInt("amount"), a.getInt("phone"), a.getString("email"), a.getString("applicationID"), a.getString("status")));
            }
        } catch (Exception ex) {
            Logger.getLogger(BankAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return BankList;
    }
    
    private ArrayList<PharmaTransactions> pharmaTransactionList() {
        ArrayList<PharmaTransactions> PharmaTransactionsList = new ArrayList<>();
        
        Database db = new Database();
        
        try {
            Connection conn = db.connect();
            String sql = "select * from pharmatransactiondata";
            PreparedStatement statement = conn.prepareStatement(sql);
            ResultSet a = statement.executeQuery();
            PharmaTransactions p;
            while(a.next()) {
                PharmaTransactionsList.add(new PharmaTransactions(a.getString("patientName"),a.getInt("amount"), a.getString("status")));
            }
        } catch (Exception ex) {
            Logger.getLogger(BankAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return PharmaTransactionsList;
    }
    
    private void addApplicationData(){
        ArrayList<Bank> bankList = bankList();
        DefaultTableModel model = (DefaultTableModel) applicationsTable.getModel();
        model.setRowCount(0);
        for(Bank p: bankList()){
            Object[] row = new Object[5];
            
            row[0] = p.getApplicationId();
            row[1] = p.getName();
            row[2] = p.getDob();
            row[3] = p.getGender();
            row[4] = p.getAmount();
            row[5] = p.getStaus();
            
            model.addRow(row);
        }
    }
    
    private void addPharmacyData(){
        ArrayList<PharmaTransactions> pharmatransactionList = pharmaTransactionList();
        DefaultTableModel model = (DefaultTableModel) pharmaTransactionsTable.getModel();
        model.setRowCount(0);
        for(PharmaTransactions p: pharmaTransactionList()){
            Object[] row = new Object[3];
            
            row[0] = p.getPatientName();
            row[1] = p.getAmount();
            row[2] = p.getStatus();
            
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        applicationsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        accountAcceptBtn = new javax.swing.JButton();
        accountRejectBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pharmaTransactionsTable = new javax.swing.JTable();
        approveDebitBtn = new javax.swing.JButton();
        declineDebitBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        backBtn.setText("<<BACK");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        applicationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Application No", "Name", "DOB", "Gender", "Amount", "Status"
            }
        ));
        jScrollPane1.setViewportView(applicationsTable);

        jLabel1.setText("Account Creation Applications");

        accountAcceptBtn.setText("Accept");
        accountAcceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountAcceptBtnActionPerformed(evt);
            }
        });

        accountRejectBtn.setText("Reject");
        accountRejectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountRejectBtnActionPerformed(evt);
            }
        });

        pharmaTransactionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Customer Name", "Amount to debit", "Status"
            }
        ));
        jScrollPane2.setViewportView(pharmaTransactionsTable);

        approveDebitBtn.setText("Approve Debit");
        approveDebitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveDebitBtnActionPerformed(evt);
            }
        });

        declineDebitBtn.setText("Decline Debit");
        declineDebitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineDebitBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Pharmacy Transactions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(187, 187, 187)
                            .addComponent(accountAcceptBtn)
                            .addGap(156, 156, 156)
                            .addComponent(accountRejectBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(116, 116, 116)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(182, 182, 182)
                            .addComponent(approveDebitBtn)
                            .addGap(130, 130, 130)
                            .addComponent(declineDebitBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(68, 68, 68)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)))))
                .addContainerGap(152, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(backBtn)
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountAcceptBtn)
                    .addComponent(accountRejectBtn))
                .addGap(67, 67, 67)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approveDebitBtn)
                    .addComponent(declineDebitBtn))
                .addContainerGap(178, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void accountAcceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountAcceptBtnActionPerformed
        // TODO add your handling code here:
        int rowIndex = applicationsTable.getSelectedRow();
        if (rowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to accept/delete bank account", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Database db = new Database();
        
        try {
            Connection conn = db.connect();
            String sql = "update bankdata set status=? where applicationID=?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, "account created");
            statement.setString(2, applicationsTable.getValueAt(rowIndex, 0).toString());
            statement.executeUpdate();
            
            db.disconnect();
            addApplicationData();
                    
        } catch (Exception ex) {
            Logger.getLogger(BankAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_accountAcceptBtnActionPerformed

    private void accountRejectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountRejectBtnActionPerformed
        // TODO add your handling code here:
        int rowIndex = applicationsTable.getSelectedRow();
        if (rowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to accept/delete bank account", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Database db = new Database();
        
        try {
            Connection conn = db.connect();
            String sql = "update bankdata set status=? where applicationID=?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, "account rejected");
            statement.setString(2, applicationsTable.getValueAt(rowIndex, 0).toString());
            statement.executeUpdate();
            
            db.disconnect();
            addApplicationData();
                    
        } catch (Exception ex) {
            Logger.getLogger(BankAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_accountRejectBtnActionPerformed

    private void approveDebitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveDebitBtnActionPerformed
        // TODO add your handling code here:
        int rowIndex = pharmaTransactionsTable.getSelectedRow();
        if (rowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to accept/decline debit transaction", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Database db = new Database();
        
        try {
            Connection conn = db.connect();
            String sql = "update pharmaorders set status=? where patientName=?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, "amount debited");
            statement.setString(2, applicationsTable.getValueAt(rowIndex, 0).toString());
            statement.executeUpdate();
            
            String sql1 = "update bankdata set amount-=? where patientName=?";
            PreparedStatement statement1 = conn.prepareStatement(sql1);
            statement.setInt(1, Integer.parseInt(applicationsTable.getValueAt(rowIndex,1).toString()));
            statement.setString(2, applicationsTable.getValueAt(rowIndex, 0).toString());
            statement.executeUpdate();
            
            db.disconnect();
            addApplicationData();
                    
        } catch (Exception ex) {
            Logger.getLogger(BankAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_approveDebitBtnActionPerformed

    private void declineDebitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineDebitBtnActionPerformed
        // TODO add your handling code here:
        int rowIndex = pharmaTransactionsTable.getSelectedRow();
        if (rowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to accept/decline debit transaction", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Database db = new Database();
        
        try {
            Connection conn = db.connect();
            String sql = "update pharmaorders set status=? where patientName=?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, "transaction declined");
            statement.setString(2, applicationsTable.getValueAt(rowIndex, 0).toString());
            statement.executeUpdate();
            
            db.disconnect();
            addApplicationData();
                    
        } catch (Exception ex) {
            Logger.getLogger(BankAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_declineDebitBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        layoutContainer.remove(this);
        CardLayout layout = (CardLayout) layoutContainer.getLayout();
        layout.previous(layoutContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accountAcceptBtn;
    private javax.swing.JButton accountRejectBtn;
    private javax.swing.JTable applicationsTable;
    private javax.swing.JButton approveDebitBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton declineDebitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable pharmaTransactionsTable;
    // End of variables declaration//GEN-END:variables
}
